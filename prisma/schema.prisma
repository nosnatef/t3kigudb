// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LinkType {
  TWITTER
  REDDIT
  PERSONAL
  WEIBO
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Character {
  id         String   @id @default(cuid())
  name       String   
  name_zh    String?
  name_jp    String?
  colorCode  String?  @default("white")
  origin     Origin   @relation(fields: [originId], references: [id])
  originId   Int
  picUrl     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  masks      Mask[]

  @@unique([originId, name])
}

model Origin {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  name_zh     String?
  name_jp     String?
  type        String        @default("NA")
  characters  Character[]
  ingestionlogs IngestionLog[]
}

model Kigu {
  id        String      @id @default(cuid())
  name      String
  picUrl    String?
  nicknames KiguNickname[]
  tags      Tag[]       @relation("KiguTags")
  languages Language[]  @relation("KiguLanguages")
  socialLinks SocialLink[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  masks     Mask[]
  isDeleted Boolean?
  twitterId String? @unique
}

model KiguNickname {
  id        String  @id @default(cuid())
  name      String
  kigu      Kigu    @relation(fields: [kiguId], references: [id])
  kiguId    String
}

model Tag {
  id        String  @id @default(cuid())
  name      String  @unique
  kigus     Kigu[]  @relation("KiguTags")
}

model Language {
  id        String  @id @default(cuid())
  name      String  @unique
  kigus     Kigu[]  @relation("KiguLanguages")
}

model SocialLink {
  id        Int           @id @default(autoincrement())
  link      String
  linkType  LinkType
  Kigu      Kigu          @relation(fields: [kiguId], references: [id])
  kiguId    String
}

model Mask {
  id          String      @id @default(cuid())
  picUrl      String
  kigu        Kigu        @relation(fields: [ownedBy], references: [id])
  ownedBy     String
  character   Character   @relation(fields: [characterId], references: [id])
  characterId String
  debutDate   DateTime
  link        String     
  maskPics    MaskPic[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  maker       Maker?       @relation(fields: [makerId], references: [id])
  makerId     Int?
  isDeleted   Boolean?

  @@unique([characterId, link])
}

model MaskPic {
  id          Int     @id @default(autoincrement())
  link        String
  mask        Mask    @relation(fields: [maskId], references: [id])
  maskId      String
}

model Maker {
  id              Int     @id @default(autoincrement())
  name            String
  makerNicknames  MakerNickname[]
  picUrl          String
  isActive        Boolean   @default(true)
  makerLinks      MakerLink[]
  masks           Mask[]
}

model MakerNickname {
  id          String    @id @default(cuid())
  name        String
  maker       Maker     @relation(fields: [makerId], references: [id])
  makerId     Int
}

model MakerLink {
  id        Int       @id @default(autoincrement())
  link      String
  linkType  LinkType
  Maker     Maker     @relation(fields: [makerId], references: [id])
  makerId   Int
}

model IngestionLog {
  id        Int   @id @default(autoincrement())
  origin     Origin   @relation(fields: [originId], references: [id])
  originId  Int
  log       String
  createdAt  DateTime @default(now())
}